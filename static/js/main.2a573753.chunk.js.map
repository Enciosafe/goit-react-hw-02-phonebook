{"version":3,"sources":["ContactForm/InputForm/InputForm.js","ContactForm/ContactForm.js","ContactList/ContactList.js","Filter/Filter.js","App.js","index.js","ContactForm/InputForm/InputForm.module.css"],"names":["InputForm","state","name","number","sex","handleChange","addContact","className","s","contactFormContainer","onSubmit","onChange","type","value","pattern","title","required","btn","checked","ContactForm","id","e","currentTarget","setState","uuidv4","preventDefault","console","log","props","contacts","some","elem","alert","reset","this","handleSexRadio","React","Component","ContactList","handlerDel","map","onClick","Filter","handlerFilter","filter","App","addNewContact","data","prevState","delContact","contact","target","changeFilter","getVisibleContacts","lowerFilter","toLowerCase","includes","parsedContacts","JSON","parse","localStorage","getItem","prevProps","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4PAsCeA,EAnCG,SAAC,GAA4D,IAAD,IAA1DC,MAAQC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,IAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,WAE1D,OAAO,sBAAKC,UAAWC,IAAEC,qBAAlB,UACH,sCACA,uBAAMC,SAAUJ,EAAhB,UAEI,uBAAOK,SAAUN,EACVO,KAAK,OACLV,KAAK,OACLW,MAAOX,EACPY,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,IAEf,wCACA,uBAAOL,SAAUN,EACVO,KAAK,MACLV,KAAK,SACLW,MAAOV,EACPW,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,IAEf,8BACI,wBAAQJ,KAAK,SACLL,UAAWC,IAAES,IADrB,2BAGJ,kCACI,uBAAOL,KAAK,QAAQV,KAAK,MAAMW,MAAM,OAAOK,QAAiB,SAARd,EAAgBO,SAAUN,IADnF,gBAEI,uBAAOO,KAAK,QAAQV,KAAK,MAAMW,MAAM,SAASK,QAAiB,WAARd,EAAkBO,SAAUN,IAFvF,0B,QCyBGc,E,4MA/CXlB,MAAQ,CACJC,KAAM,GACNC,OAAQ,GACRiB,GAAG,GACHhB,IAAK,Q,EAGTC,aAAe,SAAAgB,GACX,MAAuBA,EAAEC,cAAjBpB,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MACd,EAAKU,SAAL,eAAgBrB,EAAOW,IACvB,EAAKU,SAAS,CAACH,GAAII,iB,EAGvBlB,WAAa,SAAAe,GACTA,EAAEI,iBACFC,QAAQC,IAAI,EAAK1B,MAAMmB,IAEvB,EAAKQ,MAAMC,SAASC,MAAM,SAAAC,GAAI,OAAIA,EAAK7B,OAAS,EAAKD,MAAMC,QACrD8B,MAAM,GAAD,OAAI,EAAK/B,MAAMC,KAAf,kCACL,EAAK0B,MAAMlB,SAAS,EAAKT,OAE/B,EAAKgC,S,EAKTA,MAAQ,WACJ,EAAKV,SAAS,CACVrB,KAAM,GACNC,OAAQ,GACRiB,GAAI,M,4CAKZ,WACI,OACI,cAAC,EAAD,CACInB,MAAOiC,KAAKjC,MACZI,aAAc6B,KAAK7B,aACnBC,WAAY4B,KAAK5B,WACjB6B,eAAgBD,KAAK7B,mB,GA5CX+B,IAAMC,WCSjBC,EAZK,SAAC,GAA4B,IAA3BT,EAA0B,EAA1BA,SAAUU,EAAgB,EAAhBA,WAC5B,OAAO,8BACH,6BACKV,EAASW,KAAI,gBAAGtC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,IAAKgB,EAAtB,EAAsBA,GAAtB,OACV,+BAAclB,EAAd,KAAsBC,EAAtB,KAAgCC,EAAhC,IACI,wBAAQqC,QAASF,EAAY3B,KAAK,SAASQ,GAAIA,EAA/C,sBADKA,WCKVsB,EATA,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,OAC5B,OAAO,qCACH,uDACA,uBAAOjC,SAAUgC,EACV/B,KAAK,OACLC,MAAO+B,QCiFPC,E,4MA9EX5C,MAAQ,CACJ4B,SAAU,GACVe,OAAQ,I,EAKZE,cAAgB,SAACC,GACb,EAAKxB,UAAS,SAAAyB,GAAS,MAAK,CACzBnB,SAAS,GAAD,mBAAMmB,EAAUnB,UAAhB,CAA0BkB,S,EAIzCE,WAAa,SAAA5B,GACT,EAAKE,UAAS,SAAAyB,GAAS,MAAK,CACxBnB,SAAS,YAAKmB,EAAUnB,SAASe,QAAO,SAAAM,GAAO,OAAIA,EAAQ9B,KAAOC,EAAE8B,OAAO/B,Y,EAInFgC,aAAe,SAAA/B,GACX,IAAOR,EAASQ,EAAEC,cAAXT,MACP,EAAKU,SAAS,CAACqB,OAAQ/B,K,EAG3BwC,mBAAqB,WACjB,MAA2B,EAAKpD,MAAzB2C,EAAP,EAAOA,OAAQf,EAAf,EAAeA,SACTyB,EAAcV,EAAOW,cAE3B,OAAO1B,EAASe,QAAO,SAAAM,GAAO,OAC1BA,EAAQhD,KAAKqD,cAAcC,SAASF,O,uDAG5C,WACI,IAAMG,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aAQnDJ,GACAvB,KAAKX,SAAS,CAACM,SAAU4B,IAC3BvB,KAAKX,SAAS,CAACM,SATO,CACpB,CAACT,GAAI,OAAQlB,KAAM,gBAAiBC,OAAQ,YAAaC,IAAK,UAC9D,CAACgB,GAAI,OAAQlB,KAAM,iBAAkBC,OAAQ,YAAaC,IAAK,UAC/D,CAACgB,GAAI,OAAQlB,KAAM,gBAAiBC,OAAQ,YAAaC,IAAK,QAC9D,CAACgB,GAAI,OAAQlB,KAAM,iBAAkBC,OAAQ,YAAaC,IAAK,e,gCASvE,SAAmB0D,EAAWd,GAC1BtB,QAAQC,IAAIqB,GACZtB,QAAQC,IAAIO,KAAKjC,OAEb+C,EAAUnB,WAAaK,KAAKjC,MAAM4B,UAClC+B,aAAaG,QAAQ,WAAYL,KAAKM,UAAU9B,KAAKjC,MAAM4B,a,oBAMnE,WAEI,IAAMoC,EAAmB/B,KAAKmB,qBAElC,OAAO,qCACH,2CACC,cAAC,EAAD,CACIxB,SAAUK,KAAKjC,MAAM4B,SACrBnB,SAAUwB,KAAKY,gBAEpB,0CACA,cAAC,EAAD,CAAQH,cAAeT,KAAKkB,aACpBR,OAAQV,KAAKjC,MAAM2C,SAC3B,cAAC,EAAD,CAAaf,SAAUoC,EACV1B,WAAYL,KAAKe,oB,GA1EpBb,IAAMC,WCJxB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,qBAAuB,wCAAwC,IAAM,0B","file":"static/js/main.2a573753.chunk.js","sourcesContent":["import React from 'react';\nimport s from \"./InputForm.module.css\";\n\nconst InputForm = ({state: {name, number, sex}, handleChange, addContact}) => {\n\n    return <div className={s.contactFormContainer}>\n        <h3>Name</h3>\n        <form onSubmit={addContact}\n        >\n            <input onChange={handleChange}\n                   type=\"text\"\n                   name=\"name\"\n                   value={name}\n                   pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                   title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                   required\n            />\n            <h3>Number</h3>\n            <input onChange={handleChange}\n                   type=\"tel\"\n                   name=\"number\"\n                   value={number}\n                   pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                   title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                   required\n            />\n            <div>\n                <button type=\"submit\"\n                        className={s.btn}>Add contact</button>\n            </div>\n            <label>\n                <input type=\"radio\" name=\"sex\" value=\"male\" checked={sex === \"male\"} onChange={handleChange} /> 👨\n                <input type=\"radio\" name=\"sex\" value=\"female\" checked={sex === \"female\"} onChange={handleChange} /> 👩\n            </label>\n        </form>\n    </div>\n}\n\nexport default InputForm","import React from \"react\";\nimport InputForm from \"./InputForm/InputForm\";\nimport {v4 as uuidv4} from \"uuid\";\n\n\nclass ContactForm extends React.Component {\n\n\n    state = {\n        name: '',\n        number: '',\n        id:'',\n        sex: 'male'\n    }\n\n    handleChange = e => {\n        const { name, value} = e.currentTarget\n        this.setState({[name]: value})\n        this.setState({id: uuidv4()})\n    }\n\n    addContact = e => {\n        e.preventDefault();\n        console.log(this.state.id)\n\n        this.props.contacts.some( elem => elem.name === this.state.name )\n            ? alert(`${this.state.name} is already exist in contacts`)\n            : this.props.onSubmit(this.state)\n\n        this.reset()\n    }\n\n\n\n    reset = () => {\n        this.setState({\n            name: '',\n            number: '',\n            id: ''\n        })\n    }\n\n\n    render() {\n        return (\n            <InputForm\n                state={this.state}\n                handleChange={this.handleChange}\n                addContact={this.addContact}\n                handleSexRadio={this.handleChange}\n            />\n        );\n    }\n}\n\nexport default ContactForm","import React from \"react\";\n\nconst ContactList = ({contacts, handlerDel}) => {\n    return <div>\n        <ul>\n            {contacts.map(({ name, number, sex, id }) => (\n                <li key={id}>{name}: {number} ({sex})\n                    <button onClick={handlerDel} type=\"submit\" id={id}>delete</button>\n                </li>\n            ))}\n        </ul>\n    </div>\n}\n\nexport default ContactList","import React from \"react\";\n\nconst Filter = ({handlerFilter, filter}) => {\n    return <>\n        <p>Find contacts by name:</p>\n        <input onChange={handlerFilter}\n               type=\"text\"\n               value={filter}/>\n    </>\n}\n\nexport default Filter","import React from \"react\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"./Filter/Filter\";\nimport PropTypes from \"prop-types\";\n\n\n\nclass App extends React.Component {\n\n    state = {\n        contacts: [],\n        filter: ''\n    }\n\n\n\n    addNewContact = (data) => {\n        this.setState(prevState => ({\n           contacts: [...prevState.contacts, data]\n        }))\n    }\n\n    delContact = e => {\n        this.setState(prevState => ({\n            contacts: [...prevState.contacts.filter(contact => contact.id !== e.target.id)]\n        }))\n    }\n\n    changeFilter = e => {\n        const {value} = e.currentTarget\n        this.setState({filter: value})\n    }\n\n    getVisibleContacts = () => {\n        const {filter, contacts} = this.state\n        const lowerFilter = filter.toLowerCase()\n\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(lowerFilter))\n    }\n\n    componentDidMount() {\n        const parsedContacts = JSON.parse(localStorage.getItem('contacts'))\n        const initialContacts = [\n            {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56', sex: 'female'},\n            {id: 'id-2', name: 'Hermione Kline', number: '443-89-12', sex: 'female'},\n            {id: 'id-3', name: 'Eden Clements', number: '645-17-79', sex: 'male'},\n            {id: 'id-4', name: 'Annie Copeland', number: '227-91-26', sex: 'female'},\n        ]\n\n        if (parsedContacts) {\n            this.setState({contacts: parsedContacts})\n        } this.setState({contacts: initialContacts})\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(prevState)\n        console.log(this.state)\n\n        if (prevState.contacts !== this.state.contacts) {\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n        }\n\n    }\n\n\n    render() {\n\n        const filteredContacts = this.getVisibleContacts()\n\n    return <>\n        <h1>Phonebook</h1>\n         <ContactForm\n             contacts={this.state.contacts}\n             onSubmit={this.addNewContact}/>\n\n        <h2>Contacts</h2>\n        <Filter handlerFilter={this.changeFilter}\n                filter={this.state.filter}/>\n        <ContactList contacts={filteredContacts}\n                     handlerDel={this.delContact}\n        />\n    </>\n  }\n}\n\nexport default App;\n\n\nApp.propTypes = {\n    filter: PropTypes.string,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string,\n            sex: PropTypes.bool.isRequired\n        })\n    )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormContainer\":\"InputForm_contactFormContainer__31TJl\",\"btn\":\"InputForm_btn__3Jups\"};"],"sourceRoot":""}